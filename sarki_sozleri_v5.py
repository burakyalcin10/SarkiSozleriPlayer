import whisper
import vlc
import time
import sys
from pathlib import Path
import torch
import numpy as np
import requests
import zipfile
import os
import subprocess
import re
from colorama import init, Fore, Back, Style

# Renkli Ã§Ä±ktÄ± iÃ§in colorama'yÄ± baÅŸlat
init()

def setup_ffmpeg():
    print(f"{Fore.YELLOW}FFmpeg kuruluyor...{Style.RESET_ALL}")
    
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True)
        print(f"{Fore.GREEN}FFmpeg zaten kurulu.{Style.RESET_ALL}")
        return True
    except FileNotFoundError:
        pass
    
    ffmpeg_url = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"
    print(f"{Fore.YELLOW}FFmpeg indiriliyor...{Style.RESET_ALL}")
    
    try:
        response = requests.get(ffmpeg_url, stream=True)
        with open("ffmpeg.zip", "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        
        print(f"{Fore.YELLOW}FFmpeg Ã§Ä±karÄ±lÄ±yor...{Style.RESET_ALL}")
        with zipfile.ZipFile("ffmpeg.zip", "r") as zip_ref:
            zip_ref.extractall("ffmpeg")
        
        ffmpeg_exe = None
        for root, dirs, files in os.walk("ffmpeg"):
            if "ffmpeg.exe" in files:
                ffmpeg_exe = os.path.join(root, "ffmpeg.exe")
                break
        
        if ffmpeg_exe:
            os.rename(ffmpeg_exe, "ffmpeg.exe")
            print(f"{Fore.GREEN}FFmpeg kurulumu tamamlandÄ±.{Style.RESET_ALL}")
            return True
            
    except Exception as e:
        print(f"{Fore.RED}FFmpeg kurulumu baÅŸarÄ±sÄ±z oldu: {e}{Style.RESET_ALL}")
        return False

def temizle_sozler(text):
    # Gereksiz metinleri temizle
    text = re.sub(r'abone ol.*', '', text, flags=re.IGNORECASE)
    text = re.sub(r'like.*', '', text, flags=re.IGNORECASE)
    text = re.sub(r'subscribe.*', '', text, flags=re.IGNORECASE)
    text = re.sub(r'follow.*', '', text, flags=re.IGNORECASE)
    
    # Noktalama iÅŸaretlerini dÃ¼zelt
    text = re.sub(r'\s+([.,!?])', r'\1', text)
    
    # Fazla boÅŸluklarÄ± temizle
    text = re.sub(r'\s+', ' ', text)
    
    return text.strip()

def get_lyrics_with_timing(audio_path):
    print(f"{Fore.CYAN}ÅžarkÄ± sÃ¶zleri Ã§Ä±karÄ±lÄ±yor, lÃ¼tfen bekleyin...{Style.RESET_ALL}")
    
    # Whisper modelini yÃ¼kle (orta boy model, daha doÄŸru sonuÃ§lar)
    model = whisper.load_model("medium")
    
    # Ses dosyasÄ±nÄ± analiz et
    result = model.transcribe(audio_path, language="tr")
    
    # SonuÃ§larÄ± dÃ¼zenle ve kelimelere ayÄ±r
    segments_with_timing = []
    for segment in result["segments"]:
        start_time = segment["start"]
        end_time = segment["end"]
        text = segment["text"].strip()
        if text:
            # SÃ¶zleri temizle
            cleaned_text = temizle_sozler(text)
            if cleaned_text:
                # Metni kelimelere ayÄ±r
                words = cleaned_text.split()
                # Her kelime iÃ§in yaklaÅŸÄ±k zaman hesapla
                word_duration = (end_time - start_time) / len(words)
                
                # Her kelime iÃ§in zamanÄ± ayarla
                words_with_timing = []
                for i, word in enumerate(words):
                    word_time = start_time + (i * word_duration)
                    words_with_timing.append((word_time, word))
                
                segments_with_timing.append((start_time, end_time, words_with_timing))
    
    return segments_with_timing

def format_line(words, current_word_index=-1):
    # SatÄ±rÄ± formatla
    line = ""
    for i, word in enumerate(words):
        if i == current_word_index:
            line += f"{Fore.YELLOW}{Style.BRIGHT}{word}{Style.RESET_ALL} "
        else:
            line += f"{Fore.CYAN}{word}{Style.RESET_ALL} "
    return f"â™ª {line.strip()} â™ª"

def play_song_with_lyrics(audio_path):
    try:
        if not setup_ffmpeg():
            print(f"{Fore.RED}FFmpeg kurulumu baÅŸarÄ±sÄ±z oldu. Program sonlandÄ±rÄ±lÄ±yor.{Style.RESET_ALL}")
            return
            
        segments_with_timing = get_lyrics_with_timing(audio_path)
        
        # VLC player'Ä± baÅŸlat
        instance = vlc.Instance()
        player = instance.media_player_new()
        media = instance.media_new(audio_path)
        player.set_media(media)
        
        player.play()
        time.sleep(1)
        
        # ÅžarkÄ± sÃ¶zlerini zamanlamalÄ± gÃ¶ster
        start_time = time.time()
        displayed_lines = []
        
        for segment_start, segment_end, words_with_timing in segments_with_timing:
            # SatÄ±rdaki kelimeleri al
            words = [word for _, word in words_with_timing]
            
            # Her kelime iÃ§in
            for i, (word_time, _) in enumerate(words_with_timing):
                current_time = time.time() - start_time
                if current_time < word_time:
                    time.sleep(word_time - current_time)
                
                # Terminal ekranÄ±nÄ± temizle
                os.system('cls' if os.name == 'nt' else 'clear')
                
                # BaÅŸlÄ±k gÃ¶ster
                print(f"\n{Back.BLUE}{Fore.WHITE} ðŸŽµ ÅžarkÄ± SÃ¶zleri ðŸŽµ {Style.RESET_ALL}\n")
                
                # Ã–nceki satÄ±rlarÄ± gÃ¶ster
                for old_line in displayed_lines[-3:]:  # Son 3 satÄ±rÄ± gÃ¶ster
                    print(f"{Fore.LIGHTBLACK_EX}{old_line}{Style.RESET_ALL}")
                
                # Aktif satÄ±rÄ± gÃ¶ster
                current_line = format_line(words, i)
                print(current_line)
            
            # SatÄ±r tamamlandÄ±ÄŸÄ±nda listeye ekle
            displayed_lines.append(format_line(words))
        
        while player.is_playing():
            time.sleep(1)
            
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Program kullanÄ±cÄ± tarafÄ±ndan durduruldu.{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}Bir hata oluÅŸtu: {e}{Style.RESET_ALL}")
    finally:
        if 'player' in locals():
            player.stop()
        
        # GeÃ§ici dosyalarÄ± temizle
        if os.path.exists("ffmpeg.zip"):
            os.remove("ffmpeg.zip")
        if os.path.exists("ffmpeg"):
            import shutil
            shutil.rmtree("ffmpeg")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"{Fore.YELLOW}KullanÄ±m: python sarki_sozleri_v5.py sarki.mp3{Style.RESET_ALL}")
        sys.exit(1)
        
    audio_path = sys.argv[1]
    
    if not Path(audio_path).exists():
        print(f"{Fore.RED}Hata: {audio_path} dosyasÄ± bulunamadÄ±!{Style.RESET_ALL}")
        sys.exit(1)
    
    play_song_with_lyrics(audio_path) 